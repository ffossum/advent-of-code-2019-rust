use crate::day09;
use std::collections::HashMap;
use std::error::Error;

use std::convert::TryFrom;
use std::convert::TryInto;

pub fn main() -> Result<(), Box<dyn Error>> {
    let instructions = get_instructions();
    let program = day09::Program::new(instructions);

    let mut painted_panels: HashMap<Point, Color> = HashMap::new();

    let mut robot = Robot::new(program);

    loop {
        let current_position = robot.position;
        let current_panel_color = *painted_panels
            .get(&current_position)
            .unwrap_or(&Color::Black);

        let color_to_paint: Color = match robot.program.run(Some(current_panel_color as i64))? {
            day09::Output::Value(color_value) => color_value.try_into()?,
            day09::Output::WaitingForInput => panic!(),
            day09::Output::Halted => break,
        };

        painted_panels.insert(current_position, color_to_paint);

        match robot.program.run(Some(current_panel_color as i64))? {
            day09::Output::Value(direction_to_turn) => {
                match direction_to_turn {
                    0 => robot.turn_left(),
                    1 => robot.turn_right(),
                    _ => (),
                }
                robot.move_one();
            }
            day09::Output::WaitingForInput => panic!(),
            day09::Output::Halted => break,
        }
    }

    println!("{}", painted_panels.len());

    let instructions = get_instructions();
    let program = day09::Program::new(instructions);

    let mut painted_panels: HashMap<Point, Color> = HashMap::new();
    let mut robot = Robot::new(program);
    painted_panels.insert(robot.position, Color::White);

    loop {
        let current_position = robot.position;
        let current_panel_color = *painted_panels
            .get(&current_position)
            .unwrap_or(&Color::Black);

        let color_to_paint: Color = match robot.program.run(Some(current_panel_color as i64))? {
            day09::Output::Value(color_value) => color_value.try_into()?,
            day09::Output::WaitingForInput => panic!(),
            day09::Output::Halted => break,
        };

        painted_panels.insert(current_position, color_to_paint);

        match robot.program.run(Some(current_panel_color as i64))? {
            day09::Output::Value(direction_to_turn) => {
                match direction_to_turn {
                    0 => robot.turn_left(),
                    1 => robot.turn_right(),
                    _ => (),
                }
                robot.move_one();
            }
            day09::Output::WaitingForInput => panic!(),
            day09::Output::Halted => break,
        }
    }

    painted_panels.retain(|_, color| *color == Color::White);

    let min_x = painted_panels.keys().map(|p| p.x).min().unwrap();
    let max_x = painted_panels.keys().map(|p| p.x).max().unwrap();
    let min_y = painted_panels.keys().map(|p| p.y).min().unwrap();
    let max_y = painted_panels.keys().map(|p| p.y).max().unwrap();

    for y in min_y..=max_y {
        for x in min_x..=max_x {
            let p = Point { x, y };
            if let Some(Color::White) = painted_panels.get(&p) {
                print!("â–ˆ")
            } else {
                print!(" ")
            }
        }
        println!("")
    }

    Ok(())
}

#[derive(Clone, Copy, Eq, PartialEq)]
enum Color {
    Black = 0,
    White = 1,
}

impl TryFrom<i64> for Color {
    type Error = &'static str;
    fn try_from(value: i64) -> Result<Color, Self::Error> {
        match value {
            0 => Ok(Color::Black),
            1 => Ok(Color::White),
            _ => Err("illegal color value"),
        }
    }
}

enum Direction {
    Up,
    Right,
    Down,
    Left,
}
impl Direction {}

#[derive(Debug, Eq, PartialEq, Hash, Copy, Clone)]
struct Point {
    x: i32,
    y: i32,
}

struct Robot {
    program: day09::Program,
    position: Point,
    direction: Direction,
}
impl Robot {
    fn new(program: day09::Program) -> Self {
        Robot {
            program,
            position: Point { x: 0, y: 0 },
            direction: Direction::Up,
        }
    }
    fn turn_left(&mut self) {
        match self.direction {
            Direction::Up => self.direction = Direction::Left,
            Direction::Right => self.direction = Direction::Up,
            Direction::Down => self.direction = Direction::Right,
            Direction::Left => self.direction = Direction::Down,
        }
    }
    fn turn_right(&mut self) {
        match self.direction {
            Direction::Up => self.direction = Direction::Right,
            Direction::Right => self.direction = Direction::Down,
            Direction::Down => self.direction = Direction::Left,
            Direction::Left => self.direction = Direction::Up,
        }
    }

    fn move_one(&mut self) {
        match self.direction {
            Direction::Up => self.position.y -= 1,
            Direction::Right => self.position.x += 1,
            Direction::Down => self.position.y += 1,
            Direction::Left => self.position.x -= 1,
        }
    }
}

fn get_instructions() -> Vec<i64> {
    vec![
        3,
        8,
        1005,
        8,
        350,
        1106,
        0,
        11,
        0,
        0,
        0,
        104,
        1,
        104,
        0,
        3,
        8,
        1002,
        8,
        -1,
        10,
        101,
        1,
        10,
        10,
        4,
        10,
        1008,
        8,
        1,
        10,
        4,
        10,
        102,
        1,
        8,
        29,
        1006,
        0,
        82,
        1006,
        0,
        40,
        3,
        8,
        1002,
        8,
        -1,
        10,
        101,
        1,
        10,
        10,
        4,
        10,
        1008,
        8,
        0,
        10,
        4,
        10,
        1002,
        8,
        1,
        57,
        1,
        102,
        15,
        10,
        1,
        1005,
        14,
        10,
        1006,
        0,
        33,
        3,
        8,
        102,
        -1,
        8,
        10,
        101,
        1,
        10,
        10,
        4,
        10,
        1008,
        8,
        0,
        10,
        4,
        10,
        102,
        1,
        8,
        90,
        1,
        1008,
        14,
        10,
        2,
        3,
        19,
        10,
        1006,
        0,
        35,
        1006,
        0,
        21,
        3,
        8,
        102,
        -1,
        8,
        10,
        1001,
        10,
        1,
        10,
        4,
        10,
        108,
        1,
        8,
        10,
        4,
        10,
        1002,
        8,
        1,
        125,
        1,
        1105,
        11,
        10,
        2,
        1105,
        9,
        10,
        1,
        4,
        1,
        10,
        2,
        1,
        4,
        10,
        3,
        8,
        1002,
        8,
        -1,
        10,
        101,
        1,
        10,
        10,
        4,
        10,
        1008,
        8,
        0,
        10,
        4,
        10,
        101,
        0,
        8,
        164,
        1006,
        0,
        71,
        3,
        8,
        102,
        -1,
        8,
        10,
        101,
        1,
        10,
        10,
        4,
        10,
        1008,
        8,
        0,
        10,
        4,
        10,
        1002,
        8,
        1,
        189,
        1006,
        0,
        2,
        1,
        5,
        17,
        10,
        1006,
        0,
        76,
        1,
        1002,
        7,
        10,
        3,
        8,
        1002,
        8,
        -1,
        10,
        101,
        1,
        10,
        10,
        4,
        10,
        108,
        1,
        8,
        10,
        4,
        10,
        1001,
        8,
        0,
        224,
        1,
        3,
        5,
        10,
        3,
        8,
        1002,
        8,
        -1,
        10,
        101,
        1,
        10,
        10,
        4,
        10,
        108,
        1,
        8,
        10,
        4,
        10,
        101,
        0,
        8,
        250,
        1,
        1,
        20,
        10,
        1,
        102,
        13,
        10,
        2,
        101,
        18,
        10,
        3,
        8,
        1002,
        8,
        -1,
        10,
        101,
        1,
        10,
        10,
        4,
        10,
        108,
        0,
        8,
        10,
        4,
        10,
        102,
        1,
        8,
        284,
        2,
        105,
        0,
        10,
        1,
        105,
        20,
        10,
        3,
        8,
        1002,
        8,
        -1,
        10,
        101,
        1,
        10,
        10,
        4,
        10,
        1008,
        8,
        1,
        10,
        4,
        10,
        1002,
        8,
        1,
        315,
        1006,
        0,
        88,
        1,
        2,
        4,
        10,
        2,
        8,
        17,
        10,
        2,
        6,
        2,
        10,
        101,
        1,
        9,
        9,
        1007,
        9,
        1056,
        10,
        1005,
        10,
        15,
        99,
        109,
        672,
        104,
        0,
        104,
        1,
        21102,
        1,
        847069688728,
        1,
        21101,
        0,
        367,
        0,
        1106,
        0,
        471,
        21102,
        386577216404,
        1,
        1,
        21102,
        378,
        1,
        0,
        1105,
        1,
        471,
        3,
        10,
        104,
        0,
        104,
        1,
        3,
        10,
        104,
        0,
        104,
        0,
        3,
        10,
        104,
        0,
        104,
        1,
        3,
        10,
        104,
        0,
        104,
        1,
        3,
        10,
        104,
        0,
        104,
        0,
        3,
        10,
        104,
        0,
        104,
        1,
        21101,
        97952923867,
        0,
        1,
        21102,
        425,
        1,
        0,
        1106,
        0,
        471,
        21101,
        0,
        29033143319,
        1,
        21102,
        436,
        1,
        0,
        1105,
        1,
        471,
        3,
        10,
        104,
        0,
        104,
        0,
        3,
        10,
        104,
        0,
        104,
        0,
        21102,
        1,
        868410614628,
        1,
        21101,
        0,
        459,
        0,
        1105,
        1,
        471,
        21101,
        837896909672,
        0,
        1,
        21101,
        0,
        470,
        0,
        1105,
        1,
        471,
        99,
        109,
        2,
        22102,
        1,
        -1,
        1,
        21101,
        40,
        0,
        2,
        21102,
        502,
        1,
        3,
        21102,
        492,
        1,
        0,
        1106,
        0,
        535,
        109,
        -2,
        2105,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        109,
        2,
        3,
        10,
        204,
        -1,
        1001,
        497,
        498,
        513,
        4,
        0,
        1001,
        497,
        1,
        497,
        108,
        4,
        497,
        10,
        1006,
        10,
        529,
        1102,
        1,
        0,
        497,
        109,
        -2,
        2105,
        1,
        0,
        0,
        109,
        4,
        2101,
        0,
        -1,
        534,
        1207,
        -3,
        0,
        10,
        1006,
        10,
        552,
        21101,
        0,
        0,
        -3,
        22101,
        0,
        -3,
        1,
        22101,
        0,
        -2,
        2,
        21102,
        1,
        1,
        3,
        21101,
        571,
        0,
        0,
        1106,
        0,
        576,
        109,
        -4,
        2106,
        0,
        0,
        109,
        5,
        1207,
        -3,
        1,
        10,
        1006,
        10,
        599,
        2207,
        -4,
        -2,
        10,
        1006,
        10,
        599,
        21202,
        -4,
        1,
        -4,
        1105,
        1,
        667,
        21202,
        -4,
        1,
        1,
        21201,
        -3,
        -1,
        2,
        21202,
        -2,
        2,
        3,
        21102,
        1,
        618,
        0,
        1106,
        0,
        576,
        21201,
        1,
        0,
        -4,
        21101,
        0,
        1,
        -1,
        2207,
        -4,
        -2,
        10,
        1006,
        10,
        637,
        21102,
        0,
        1,
        -1,
        22202,
        -2,
        -1,
        -2,
        2107,
        0,
        -3,
        10,
        1006,
        10,
        659,
        21202,
        -1,
        1,
        1,
        21101,
        659,
        0,
        0,
        106,
        0,
        534,
        21202,
        -2,
        -1,
        -2,
        22201,
        -4,
        -2,
        -4,
        109,
        -5,
        2105,
        1,
        0,
    ]
}
